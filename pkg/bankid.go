// Package pkg provides utilities for interfacing with the BankID RP API.
package pkg

import (
	"context"
	"crypto/hmac"
	"crypto/sha256"
	"encoding/hex"
	"errors"
	"fmt"

	"github.com/e-identification/bankid-go/pkg/configuration"
	"github.com/e-identification/bankid-go/pkg/internal"
	"github.com/e-identification/bankid-go/pkg/internal/http"
	"github.com/e-identification/bankid-go/pkg/payload"
	"github.com/e-identification/bankid-go/pkg/response"

	playground "gopkg.in/go-playground/validator.v9"
)

// Authenticator is the interface implemented by types that can initiate an authenticate request via the BankID RP API.
type Authenticator interface {
	// Authenticate - Initiates an authentication order.
	//
	// Use the collect method to query the status of the order.
	// If the request is successful, the orderRef and autoStartToken is returned.
	//
	// Implements the Authenticator interface
	// It returns APIError for errors that originates from the BankID RP API, ValidationError if incorrect payload or
	// std errors such as net.OpError on network errors.
	Authenticate(context context.Context, payload *payload.AuthenticationPayload) (*response.AuthenticateResponse, error)
}

// Signer is the interface implemented by types that can initiate a sign request via the BankID RP API.
type Signer interface {
	// Sign - Initiates a sign order.
	//
	// Use the collect method to query the status of the order.
	// If the request is successful, the orderRef and autoStartToken is returned.
	//
	// It returns APIError for errors that originates from the BankID RP API, ValidationError if incorrect payload or
	// std errors such as net.OpError on network errors.
	Sign(context context.Context, payload *payload.SignPayload) (*response.SignResponse, error)
}

// Collector is the interface implemented by types that can collect an order via the BankID RP API.
type Collector interface {
	// Collect - Collects the result of a sign or auth order suing the orderRef as reference.
	//
	// RP should keep calling collect every two seconds as long as status indicates pending.
	// RP must abort if status indicates failed. The User identity is returned when complete.
	//
	// It returns APIError for errors that originates from the BankID RP API, ValidationError if incorrect payload or
	// std errors such as net.OpError on network errors.
	Collect(context context.Context, payload *payload.CollectPayload) (*response.CollectResponse, error)
}

// OrderCanceller is the interface implemented by types that can cancel an order via the BankID RP API.
type OrderCanceller interface {
	// Cancel - Cancels an ongoing sign or auth order.
	//
	// This is typically used if the User cancels the order in your service or app.
	//
	// It returns APIError for errors that originates from the BankID RP API, ValidationError if incorrect payload or
	// std errors such as net.OpError on network errors.
	Cancel(context context.Context, payload *payload.CancelPayload) (*response.CancelResponse, error)
}

// QRCodeContentGenerator is the interface implemented by types that can generate the QR code content.
type QRCodeContentGenerator interface {
	// QRCodeContent - Generates the QR code content based on qrStartToken, qrStartSecret and seconds elapsed since
	// response.
	//
	// The QR code is generated by the RP every second using the pattern "bankid.qrStartToken.time.qrAuthCode"
	// as input.
	QRCodeContent(qrStartToken, qrStartSecret string, seconds int) (string, error)
}

// BankID provides methods for interfacing with the BankID RP API.
type BankID interface {
	Authenticator
	Signer
	Collector
	OrderCanceller
	QRCodeContentGenerator
}

// To ensure that BankIDClient implements the BankID interface.
var _ BankID = (*BankIDClient)(nil)

// BankIDClient contains the validator and configuration context.
type BankIDClient struct {
	validator     *playground.Validate
	configuration *configuration.Configuration
	client        http.Client
}

// NewBankIDClient returns a new instance of 'BankIDClient'.
func NewBankIDClient(configuration *configuration.Configuration) (*BankIDClient, error) {
	client, err := http.NewClient(configuration)
	if err != nil {
		return nil, fmt.Errorf("unable to initialize http client. %w", err)
	}

	validator, err := internal.NewValidator()
	if err != nil {
		return nil, fmt.Errorf("unable to initialize validator. %w", err)
	}

	return &BankIDClient{validator: validator, configuration: configuration, client: client}, nil
}

// Authenticate - Initiates an authentication order.
//
// Use the collect method to query the status of the order.
// If the request is successful, the orderRef and autoStartToken is returned.
//
// Implements the Authenticator interface
// It returns APIError for errors that originates from the BankID RP API, ValidationError if incorrect payload or std
// errors such as net.OpError on network errors.
func (b BankIDClient) Authenticate(
	context context.Context,
	payload *payload.AuthenticationPayload,
) (*response.AuthenticateResponse, error) {
	request := &http.Request{
		URI: "auth", Payload: payload, Response: &response.AuthenticateResponse{}, ErrorResponse: &APIError{},
	}

	httpResponse, err := b.call(context, request)
	if err != nil {
		return nil, err
	}

	return internal.Cast[*response.AuthenticateResponse](httpResponse)
}

// PhoneAuthenticate - Initiates a phone authentication order.
//
// Use the collect method to query the status of the order.
// If the request is successful, the orderRef and autoStartToken is returned.
//
// Implements the Authenticator interface
// It returns APIError for errors that originates from the BankID RP API, ValidationError if incorrect payload or std
// errors such as net.OpError on network errors.
func (b BankIDClient) PhoneAuthenticate(
	context context.Context,
	payload *payload.PhoneAuthenticationPayload,
) (*response.PhoneAuthenticateResponse, error) {
	request := &http.Request{
		URI: "phone/auth", Payload: payload, Response: &response.PhoneAuthenticateResponse{}, ErrorResponse: &APIError{},
	}

	httpResponse, err := b.call(context, request)
	if err != nil {
		return nil, err
	}

	return internal.Cast[*response.PhoneAuthenticateResponse](httpResponse)
}

// Sign - Initiates a sign order.
//
// Use the collect method to query the status of the order.
// If the request is successful, the orderRef and autoStartToken is returned.
//
// It returns APIError for errors that originates from the BankID RP API, ValidationError if incorrect payload or std errors such as net.OpError on network errors.
func (b BankIDClient) Sign(context context.Context, payload *payload.SignPayload) (*response.SignResponse, error) {
	request := &http.Request{URI: "sign", Payload: payload, Response: &response.SignResponse{}, ErrorResponse: &APIError{}}

	httpResponse, err := b.call(context, request)
	if err != nil {
		return nil, err
	}

	return internal.Cast[*response.SignResponse](httpResponse)
}

// PhoneSign - Initiates a sign order.
//
// Use the collect method to query the status of the order.
// If the request is successful, the orderRef and autoStartToken is returned.
//
// It returns APIError for errors that originates from the BankID RP API, ValidationError if incorrect payload or std
// errors such as net.OpError on network errors.
func (b BankIDClient) PhoneSign(
	context context.Context,
	payload *payload.PhoneSignPayload,
) (*response.PhoneSignResponse, error) {
	request := &http.Request{
		URI: "phone/sign", Payload: payload, Response: &response.PhoneSignResponse{}, ErrorResponse: &APIError{},
	}

	httpResponse, err := b.call(context, request)
	if err != nil {
		return nil, err
	}

	return internal.Cast[*response.PhoneSignResponse](httpResponse)
}

// Collect - Collects the result of a sign or auth order suing the orderRef as reference.
//
// RP should keep calling collect every two seconds as long as status indicates pending.
// RP must abort if status indicates failed. The User identity is returned when complete.
//
// It returns APIError for errors that originates from the BankID RP API, ValidationError if incorrect payload or std
// errors such as net.OpError on network errors.
func (b BankIDClient) Collect(
	context context.Context,
	payload *payload.CollectPayload,
) (*response.CollectResponse, error) {
	request := &http.Request{
		URI: "collect", Payload: payload, Response: &response.CollectResponse{}, ErrorResponse: &APIError{},
	}

	httpResponse, err := b.call(context, request)
	if err != nil {
		return nil, err
	}

	return internal.Cast[*response.CollectResponse](httpResponse)
}

// Cancel - Cancels an ongoing sign or auth order.
//
// This is typically used if the User cancels the order in your service or app.
//
// It returns APIError for errors that originates from the BankID RP API, ValidationError if incorrect payload or std
// errors such as net.OpError on network errors.
func (b BankIDClient) Cancel(
	context context.Context,
	payload *payload.CancelPayload,
) (*response.CancelResponse, error) {
	request := &http.Request{
		URI: "cancel", Payload: payload, Response: &response.CancelResponse{}, ErrorResponse: &APIError{},
	}

	httpResult, err := b.call(context, request)
	if err != nil {
		return nil, err
	}

	return internal.Cast[*response.CancelResponse](httpResult)
}

// QRCodeContent - Generates the QR code content based on qrStartToken, qrStartSecret and seconds elapsed since response.
//
// The QR code is generated by the RP every second using the pattern "bankid.qrStartToken.time.qrAuthCode" as input.
func (b BankIDClient) QRCodeContent(qrStartToken, qrStartSecret string, seconds int) (string, error) {
	hash := hmac.New(sha256.New, []byte(qrStartSecret))

	_, err := fmt.Fprintf(hash, "%d", seconds)
	if err != nil {
		return "", fmt.Errorf("qr code content error %w", err)
	}

	return fmt.Sprintf("bankid.%s.%d.%s", qrStartToken, seconds, hex.EncodeToString(hash.Sum(nil))), nil
}

// call validates the prerequisites of the requests and invokes the REST API method.
func (b BankIDClient) call(context context.Context, request *http.Request) (http.Response, error) {
	// Validate the integrity of the Payload
	if err := b.validator.Struct(request.Payload); err != nil {
		var validationErrors playground.ValidationErrors
		if errors.As(err, &validationErrors) {
			fieldError := validationErrors[0]

			return nil, NewValidationError(fieldError.Field(), fieldError.Value(), err)
		}

		return nil, fmt.Errorf("unable to validate the request payload. %w", err)
	}

	return b.client.Call(context, request) // nolint: wrapcheck
}
